# filename: /docs/examples/database/crud.cfg

############################################################
##
## Examples  : Database : CRUD
##
############################################################

view_name: &view_name "Database : CRUD"

include conf/elements/html-basic.cfg
include conf/elements/html-form.cfg
include conf/elements/html-datatables.cfg
include conf/elements/html-bootstrap-panel.cfg

include conf/elements/ace.cfg

templates:

	value_table: &value_table
		**datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,
		#ordering: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						<b>CRUD</b> stands for <i>create</i>, <i>read</i>, <i>update</i>, <i>delete</i>.  These processes are the four basic processes used to make any data driven application.  The following turtorial demonstrates how to make a simple <i>blog</i> application using WebYAML and a MySQL/MariaDB database.
				-
					**spacer
					height: 20
				-
					**h4
					class: page-header
					value: Application Directory
					id: appdir
				-
					**p
					value: |
						The first step in building a new application is to create an <b>application directory</b>.  The simplest way to create an application directory is to make a copy of the <i>blank</i> site included in the <a href="/docs/gettingstarted/installation#sites"><b>sites</b></a> package.
				-
					**ace
					id: ace-appdir
					mode: sh
					code: |
						cd /opt/webyaml/sites/
						cp -rfp blank blog
				-
					**p
					class: alert alert-info
					style: 'border-left: 5px solid;'
					value: |
						The commands above assume that WebYAML was installed in the directory <i>/opt/webyaml</i>.  If you chose a different directory for your installiation, modify these commands to suit your needs.
				-
					**spacer
					height: 20						
				-
					**h4
					class: page-header
					value: Database and Tables
					id: mysql
				-
					**p
					value: |						
						In order to make a working application you will need have access to a database server with at least one database and table.  Installing and configuring a database server is beyond the scope of this documentation.  
				-
					**p
					value: |
						This example assumes that MySQL or MariaDB is installed on the same computer which is running WebYAML.  For this example we will be using the database <i>webyaml</i> which contains the table <i>post</i>.  Here is the structure of the post table used in the example.
				-
					**ace
					id: ace-mysql
					mode: mysql
					code: |
						CREATE TABLE IF NOT EXISTS post (
						  id mediumint(6) NOT NULL AUTO_INCREMENT,
						  title varchar(256) NOT NULL,
						  body text NOT NULL,
						  status varchar(20) NOT NULL,
						  PRIMARY KEY (id)
						) DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;
				-
					**spacer
					height: 20						
				-
					**h4
					value: Database Configuration
					class: page-header
					id: dbcfg
				-
					**p
					value: |
						It is recommended to create a configuration file for the MySQL processors.  This file simplifies the calling of the processors, and keeps the database connection information and credentials in one convenient place.
				-
					**p
					value: |
						Create the directory <i>conf/settings</i> and save the file below as <i>conf/settings/db.cfg</i>.  Change the attributes {{keyword("host")}}, {{keyword("db")}}, {{keyword("user")}}, and {{keyword("passwd")}} for your needs.
				-
					**ace
					id: ace-dbcfg
					code: |
						# filename: conf/settings/db.cfg
						
						db_conf: &db_conf
							host: localhost
							db: webyaml
							user: dbuser
							passwd: "secret"

						insert: &insert
							\**mysqlInsert
							conf:
								**db_conf
						
						update: &update
							\**mysqlUpdate
							conf:
								**db_conf		
						
						select: &select
							\**mysqlSelect
							conf:
								**db_conf
				-
					**spacer
					height: 20								
				-
					**h4
					value: Page Template
					class: page-header
					id: template
				-
					**p
					value: '{{html_escape(code)}}'
					code: |
						Page templates are a convient way to create re-usable content for views.  A page template for a web application typically includes the html tags <html>, <head>, and <body>. 
				-
					**p
					value: '{{html_escape(code)}}'
					code: |
						Inside of the <head> tag, additional tags can be added to define meta data or load resources like stylesheets and javascript files.  Inside of the <body> tag, a template may include tags for adding fixed content on pages such as headers, menus, and footers.
				-
					**p
					value: |
						The WebYAML core provides libraries of <a href="/docs/design/content#block"><b>content blocks</b></a> for using the most common html tags.  Using this library we can create a page template for this application.  Save the following page template configuration as <i>conf/template.cfg</i>.
				-
					**ace
					id: ace-template
					code: |
						# filename: conf/tempalte.cfg
						\include conf/elements/html-basic.cfg
						
						# top content block
						\**html
						content:
							-
								\**head
								content:
									-
										\**title
										# &view_name will be defined in the view configuration
										value: *view_name
									-
										\**js
										value: '/static/bower_components/jquery/dist/jquery.min.js'
									-
										\**js
										value: '/static/bower_components/bootstrap/dist/js/bootstrap.min.js'
									-
										\**css
										value: '/static/bower_components/bootstrap/dist/css/bootstrap.min.css'
									-
										# bootstrap meta tags
										\**responsive										
							-
								\**body
								content:
									\**div
									width: 8
									offset: 2
									content:
										# &view will be defined in the view configuration
										\**view
				-
					**spacer
					height: 20	
				-
					**h4
					class: page-header
					value: Defining CRUD Views
					id: views
				-
					**p
					value: |
						The next step in building this application is to define the views that application will use.  This is done by making changes to the file <i>conf/urls.cfg</i> in the application directory.  Replace the example content in that file with the view definitions below.
				-
					**ace
					id: ace-views
					code: |
						# filename: conf/urls.cfg
						
						# Create post
						-
							/post/create:
								conf: conf/post/create.cfg
						
						# Read post
						-
							/post/read:
								conf: conf/post/read.cfg
						
						# Update post
						-
							/post/update:
								conf: conf/post/update.cfg									
						
						# Delete posts
						-
							/post/delete:
								conf: conf/post/delete.cfg
								
						# More (Read) Views
						
						# list posts (table)
						-
							/post/list:
								conf: conf/post/list.cfg
								
						# list posts (bootstrap 3 media)
						-
							/post/media:
								conf: conf/post/media.cfg
				-
					**p
					value: |
						The file above contains six page views.  The first 4 items are for create, read, update, and delete.  The two extra views <i>/post/list</i> and <i>/post/media</i> will be used to display multiple posts at one time.  Each of these views has its own configuration file defined using the {{keyword("conf")}} attribute.  Later in this tutorial each of these configuration files will be shown.
				-
					**spacer
					height: 20						
				-
					**h4
					class: page-header
					value: Creating and Testing Views
					id: view
				-
					**p
					value: |
						Before making a functional view, it is a good idea to make a simple view which will test the template.  The easiest way of doing this is to make a simple view with minimal content and include the database settings and the page template.
				-
					**p
					value: |
						Create the directory <i>conf/post</i> and save the simple view below as <i>conf/post/create.cfg</i>.
						
				-
					**ace
					id: ace-view
					code: |
						# filename: conf/post/create.cfg
						
						\include conf/elements/html-basic.cfg
						\include conf/elements/html-form.cfg
						\include conf/settings/db.cfg
						
						# define the anchor &view_name
						view_name: &view_name "Post : Create"
						
						# define the anchor &view
						view: &view
							content:
								-
									\**h1
									value: Say Something!
								-
									\**h3
									class: page-header
									value: Create a New Post
						
						# Page Template 
						# The aliases **view_name and **view 
						# will be used in the template
						\include conf/template.cfg
				-
					**p
					value: |
						Start the application server and test the simple view.  Issue the following command to start the blog application using the CherryPY web server.
				-
					**ace
					id: ace-server
					mode: sh
					code: |
						./opt/webyaml/sites/blog/app.py
				-
					**p
					value: |
						After the server has started visit the page <i>http://localhost:8080/post/create</i> in a web browser.  If everything is working you should see this:
				-
					**panel_noheader
					class: row
					content:
						-
							**h1
							value: Say Something!
						-
							**h3
							class: page-header
							value: Create a New Post
		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<!--
						<li class="previous">
							<a href="/docs/design/contentblocks">
								<span aria-hidden="true">&larr;</span>
								Content Blocks
							</a>
						</li>
						-->
						<li class="next">
							<a href="/docs/tutorials/database/crud/create">
								Create View
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20


include conf/docs/template.cfg