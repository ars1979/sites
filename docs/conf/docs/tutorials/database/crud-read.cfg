# filename: /docs/examples/database/crud.cfg

############################################################
##
## Examples  : Database : CRUD
##
############################################################

view_name: &view_name "Database : CRUD : Read"

include conf/elements/html-basic.cfg
include conf/elements/html-form.cfg
include conf/elements/html-datatables.cfg
include conf/elements/html-bootstrap-panel.cfg

include conf/elements/ace.cfg

templates:

	value_table: &value_table
		**datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,
		#ordering: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						In the previous section we created the view <i>/post/create</i> which is used to create database records.  Continuing with the CRUD tutorial the next view is <i>/post/read</i>
				-
					**spacer
					height: 20
				-
					**h4
					class: page-header
					value: conf/post/read.cfg
					id: create
				-
					**p
					value: |
						The view <i>/post/read</i> is rendered using the configuration file <i>conf/post/read.cfg</i>.  This configuration file is based on the file <i>conf/post/create.cfg</i>.  In this configuration, the {{keyword("postprocess")}} attribute has been removed and the {{keyword("process")}} attribute has been added.  The process attribute contains the processor <b>**select</b> which is defined in <i>conf/settings/db.cfg</i>.  
				-
					**ace
					id: ace-create1
					code: |
						# filename: conf/post/read.cfg
						
						\include conf/elements/html-basic.cfg
						\include conf/elements/html-form.cfg
						\include conf/settings/db.cfg
						
						# define the anchor &view_name
						view_name: &view_name "Post : Read"
						
						# define the anchor &view
						view: &view
							content:
								-
									\**h3
									class: page-header
									value: Read a Post
								-
									\**form
									name: read
									
									# Select a record from the database
									process:
										\**select
										sql: |
											SELECT title, body
											FROM post 
											WHERE id = \{\{get:id\}\}
										reader: record
										result:
											store: blogpost
									
									# form fields
									content:
										-
											\**textbox
											name: title
											label: Title
											required:
											value: '\{\{blogpost:title\}\}'
										-	
											\**textarea
											name: body
											label: Body
											required:
											value: '\{\{blogpost:body\}\}'
										-
											\**button
											name: Submit
											color: primary
						
						# Page Template 
						# The aliases **view_name and **view 
						# will be used in the template
						\include conf/template.cfg
				-
					**p
					value: '{{html_markers(code)}}'
					code: |						
						In the configuration above, the marker {{get:id}} is used as part of a SQL query to request a record.  This marker is replaced by the value of the GET variable <i>id</i> before processing.  Therefore this page must be loaded with the variable <i>id</i> as a key-value pair in the query string. For example, if the requested view is <i>http://localhost:8080/post/read?id=1</i>, then the title and body of the record in the post table with the id of <i>1</i> will be retreived and stored in a dictionary named <i>blogpost</i>.  And the markers {{blogpost:title}} and {{blogpost:body}} are used to pre-populate values in a form.
				-
					**spacer
					height: 20

		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/tutorials/database/crud/create">
								<span aria-hidden="true">&larr;</span>
								Create View
							</a>
						</li>
						<li class="next">
							<a href="/docs/tutorials/database/crud/update">
								Update View
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20

include conf/docs/template.cfg