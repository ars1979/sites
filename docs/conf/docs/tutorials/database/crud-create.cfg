# filename: /docs/examples/database/crud.cfg

############################################################
##
## Examples  : Database : CRUD
##
############################################################

view_name: &view_name "Database : CRUD : Create"

include conf/elements/html-basic.cfg
include conf/elements/html-form.cfg
include conf/elements/html-datatables.cfg
include conf/elements/html-bootstrap-panel.cfg

include conf/elements/ace.cfg

templates:

	value_table: &value_table
		**datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,
		#ordering: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						Up to this point we have laid out a lot of ground work.  Now we can leverage what we have done to make all of the views for this application.  Let's start by modifying the view <i>/post/create</i> and its corresponding configuration file <i>conf/post/create.cfg</i>
				-
					**spacer
					height: 20

				-
					**h4
					class: page-header
					value: conf/post/create.cfg
					id: create
				-
					**p
					value: |
						The first modification to the view is to add a form with a texbox to collect the title, a textarea for the body, and a submit button.
				-
					**ace
					id: ace-create1
					code: |
						# filename: conf/post/create.cfg
						
						\include conf/elements/html-basic.cfg
						\include conf/elements/html-form.cfg
						\include conf/settings/db.cfg
						
						# define the anchor &view_name
						view_name: &view_name "Post : Create"
						
						# define the anchor &view
						view: &view
							content:
								-
									\**h1
									value: Say Something!
								-
									\**h3
									class: page-header
									value: Create a New Post
								-
									\**form
									name: create
									
									# form fields
									content:
										-
											\**textbox
											name: title
											label: Title
											required:
										-	
											\**textarea
											name: body
											label: Body
											required:
										-
											\**button
											name: Submit
											color: primary
						
						# Page Template 
						# The aliases **view_name and **view 
						# will be used in the template
						\include conf/template.cfg
				-
					**p
					value: |
						If you refresh your web browser or revisit the page <i>http://localhost:8080/post/create</i> you should now see a form like this:
				-
					**panel_noheader
					class: row
					content:
						-
							**h1
							value: Say Something!
						-
							**h3
							class: page-header
							value: Create a New Post
						-
							**form
							name: create
							
							# form fields
							content:
								-
									**textbox
									name: title
									label: Title
									required:
								-	
									**textarea
									name: body
									label: Body
									required:
								-
									**button
									name: Submit
									color: primary	
				-
					**p
					value: |
						Thanks to the library <i>conf/elements/html-form.cfg</i> and the form validators, the form has a lot of functionality.  The view is really close to being finished, but it still needs some more work.  The view is missing something very important.  Below a {{keyword("postprocess")}} attribute is added to the form which will perform actions if the form validates.  

				-
					**ace
					id: ace-create
					code: |
						# filename: conf/post/create.cfg
						
						\include conf/elements/html-basic.cfg
						\include conf/elements/html-form.cfg
						\include conf/settings/db.cfg
						
						# define the anchor &view_name
						view_name: &view_name "Post : Create"
						
						# define the anchor &view
						view: &view
							content:
								-
									\**h1
									value: Say Something!
								-
									\**h3
									class: page-header
									value: Create a New Post
								-
									\**form
									name: create
									
									# form fields
									content:
										-
											\**textbox
											name: title
											label: Title
											required:
										-	
											\**textarea
											name: body
											label: Body
											required:
										-
											\**button
											name: Submit
											color: primary
									
									# save the post
									postprocess:
										\**insert
										sql: |
											INSERT INTO post
											(
												title, 
												body, 
												status
											)
												VALUES
											(
												'\{\{escape(post:title)\}\}', 
												'\{\{escape(post:body)\}\}', 
												'active'
											)
										
										# redirect to list
										true:
											\**redirect
											url: /post/list
						
						# Page Template 
						# The aliases **view_name and **view 
						# will be used in the template
						\include conf/template.cfg
				
				-
					**p
					value: |				
						The {{keyword("postprocess")}} attribute above defines a <a href="/docs/design/processors#conditional"><b>processor tree</b></a> containing two processors and their attributes.  The first processor is <b>**insert</b>.  This processor is based on <b>**mysqlInsert</b> and was defined above in <i>conf/settings/db.cfg</i>.  The {{keyword("sql")}} attribute of this processor contains a fairly normal MySQL INSERT statment with the exception that the values for title and body are <a href="/docs/design/markers"><b>markers</b></a>.  
				-
					**p
					value: |
						The markers in the SQL statment contain two components a value and a function.  The values used here are the HTTP POST variables, <i>title</i> and <i>body</i>. The function <b>escape()</b> is used to prefix any quotation marks (', ") in these values with the blackslash (/) charater.   This is important because a single quote (') charcter in the values will break the SQL statment. 
				-
					**p
					value: |
						If the SQL statement was sucessfully executed and the record was stored, the processor tree will continue through {{keyword("true")}} to <b>**redirect</b>.  In this case the user will be redirected to the <i>/post/list</i> view that will be created in the next section.
						
				-
					**p
					value: |
						Now the view is complete.  The form is rendered, it has validators for two required fields, valid results are inserted into the database, and finally the user is redirected to a list page after the new record is created in the database.

						
					
						
				-
					**spacer
					height: 20

		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/tutorials/database/crud">
								<span aria-hidden="true">&larr;</span>
								CRUD
							</a>
						</li>
						<li class="next">
							<a href="/docs/tutorials/database/crud/read">
								Read View
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20

include conf/docs/template.cfg