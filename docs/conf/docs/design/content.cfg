# filename: conf/docs/configs/marker.cfg
# path: /docs/configs/marker

############################################################
##
## Design  : Content Blocks
##
############################################################

view_name: &view_name "Design  : Content Blocks"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: 'Design  : Content'
				-
					**p
					value: |
						<b>Content</b> is the output of a view.  Each <a href="/docs/design/views"><b>view</b></a> must define at least one content configuration file.  These files are parsed by WebYAML to create a Python data object that contains instructions to generate a web page, API endpoint, or other file to be serverd via a webserver.
				-
					<<: *spacer
					height: 20							
				-
					<<: *h4
					value: 'Configuration Files'
				-
					**p
					value: |
						A content configuration file contains one or more content blocks described below.
				-
					<<: *spacer
					height: 20		
				-
					<<: *h4
					value: 'Content Blocks'
					id: block
				-
					<<: *p
					value: |
						A <b>content block</b> is the atomic unit of WebYAML.  Content blocks contain instructions for producing output in an application.  
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									value: "Hello World"
									wrap: "<h4>|</h4>"
						-
							name: HTML
							id: "html-1"
							content:
								**ace
								mode: html
								content:
									value: "Hello World"
									wrap: "<h4>|</h4>"
						-
							name: Preview
							id: "preview-1"
							class: row
							content:
								<<: *panel_noheader
								content:
						
									-
										value: "Hello World"
										wrap: "<h4>|</h4>"
				-
					<<: *p
					value: |
						The example above is a single content block containing two attributes, {{"value".keyword()}} and {{"wrap".keyword()}}.  Attributes contain information used by WebYAML to generate views for applicatons and APIs.  The attribute {{"value".keyword()}} may be a literal value or undefined at this time.
				-
					<<: *p
					value: |						
						The {{"wrap".keyword()}} attribute is used to perform additional processing by WebYAML called wrapping.  <b>Wrapping</b> is the process of surrounding collected output with additional text.  This additional text is defined in the attribute {{"wrap".keyword()}} and must be in the form "before|after" where the verticle bar (|) separates the wrap into two parts.  To understand how wrapping works, study the YAML and HTML tabs above.
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> WebYAML makes heavy use of YAML syntax.  As a result most of the examples found in this 
						documentation will also use YAML syntax.  YAML is designed to be human readable and is similar to other serialized 
						data such as JSON or Python data objects.  If you are not familiar with YAML, there are plenty of good references available.  
						Here is a good place to start: <a href="https://learnxinyminutes.com/docs/yaml/">https://learnxinyminutes.com/docs/yaml/</a>					
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: The Content Tree
				-
					<<: *p
					value: |
						Content blocks may include other content blocks.  Nesting content blocks produces a <b>content tree</b>.  Nest content blocks using the {{"content".keyword()}} attribute like in the example below:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml2"
							length: 10
							content:
								**ace
								code: |
									# Top content block
									wrap: "<div>|</div>"
									content:
										-
											# Sub content block
											value: "Hello World"
											wrap: "<h4>|</h4>"
										-
											# Sub content block
											value: |
												Here is some multi-line text....
												....End of text
											wrap: "<p>|</p>"
						-
							name: HTML
							id: "html2"
							length: 10
							content:
								**ace
								mode: html
								content:
									# Top content block
									wrap: |
										<div>
											|
										</div>
									content:
										-
											# Sub content block
											value: "Hello World"
											wrap: |
												<h4>
													|
												</h4>
										-
											# Sub content block
											value: |
												Here is some multi-line text....
												....End of text
											wrap: |
												<p>
													|
												</p>
						-
							name: Preview
							id: "preview2"
							length: 10
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16
									-
										# Top content block
										wrap: "<div>|</div>"
										content:
											-
												# Sub content block
												value: "Hello World"
												wrap: "<h4>|</h4>"
											-
												# Sub content block
												value: |
													Here is some multi-line text....
													....End of text
												wrap: "<p>|</p>"					
				-
					<<: *p
					value: |
						This example introduces three new YAML syntaxes to content blocks.  The first new syntax is a comment.  <b>Comments</b> start with a  pound sign or "hash tag" (#) and continue untill the end of a line.  The second new syntax is a list which is notated by indentation and hyphens (-).   The third new syntax is multi-line text  which is notated by a verticle bar (|) followed by an indented block of text.  These are all standard  YAML syntaxes.  For a more detailed explanation please see the YAML tutorial link above.						
				-
					<<: *p
					value: |
						The content tree begins with the "Top" content block which contains the attributes {{"content".keyword()}} and {{"wrap".keyword()}}.  The value of the {{"content".keyword()}} attribute is a list containing subcontent blocks. 
				-
					<<: *p
					value: |						
						A content tree is created and processed from root ("top") to branches ("sub"), but it is rendered from branch to root.  This allows subcontent to be wrapped by its parent content.   Please study the YAML and HTML tabs above to understand how the wraps are applied.
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> YAML syntax uses spaces for indentation.  However, you may use tabs if you prefer.  Tabs will be converted to spaces when the configurations are loaded.
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: Element	Types
				-
					<<: *p
					value: |			
						The next example uses the {{"type".keyword()}} attribute.  The default value of the attribute {{"type".keyword()}} is 
						<b><i>classes.element.Element</i></b>.  WebYAML includes libraries of elements that can be used instead of the 
						default type.  Developers can extend the base class to create new elements.
				-
					<<: *p
					value: |
						The example below uses the class <b><i>lib.elements.tabs.Tab</i></b>.  This element type creates Twitter Bootstrap tabs, such as, the ones used in this documentation. 
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml3"
							length: 10
							content:
								**ace
								code: |
									type: lib.elements.tabs.Tabs
									content:
										-
											name: "Tab One"
											id: "tab_1"
											value: Here is some text.
										-
											name: "Tab Two"
											id: "tab_2"
											value: Here is some different text.
						-
							name: HTML
							id: "html3"
							length: 10
							content:
								**ace
								mode: html
								code: |
									<ul class="nav nav-tabs">
										<li class="active">
											<a href="#tab_1" data-toggle="tab" aria-expanded="true">Tab One</a>
										</li>
										<li class="">
											<a href="#tab_2" data-toggle="tab" aria-expanded="false">Tab Two</a>
										</li>
									</ul>
									<div class="tab-content">
										<div class="tab-pane fade active in" id="tab_1">
											Here is some text.
										</div>  
										<div class="tab-pane fade" id="tab_2">
											Here is some different text.
										</div>
									</div>
						-
							name: Preview
							id: "preview3"
							length: 10
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16
									-
										type: lib.elements.tabs.Tabs
										content:
											-
												name: "Tab One"
												id: "tab_1"
												value: Here is some text.
											-
												name: "Tab Two"
												id: "tab_2"
												value: Here is some different text.
				-
					<<: *p
					value: |
						In addition to the attribute {{"type".keyword()}} this example uses two new attributes, {{"name".keyword()}} and {{"id".keyword()}}.  
						These are custom attributes, and they are used by the <i>class lib.elements.tabs.Tabs</i> to name the tabs in the display and map content for each tab.			
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: Default Attributes					
				-
					<<: *p
					value: |
						Content blocks can have many different attributes, which can be defined in classes or directly in content blocks.  The reference chart below lists attributes that are defined in the base classes and therefore can be used within any content block.
				-
					<<: *datatable_js
					id: markers
					values:
						#- ["acl","Access Control List logical expression", "", ""]
						- ["content","Define nested content blocks", "", ""]
						- ["log","Append value to log file", "", ""]
						- ["noindent", "Do not indent this element", "", ""]
						- ["nomarkup","Do not markup this element", "", ""]
						- ["singlemarkup","May be needed to avoid extra processing","",""]
						- ["process","Pre-processor objects", "", ""]
						#- ["rstrip","Function - rstrip()", "", ""]
						#- ["strip","Function - strip()", "", ""]
						- ["type","Element type", "Required", "classes.element.Element"]
						- ["value","Content value or Output", "Required", "EMPTY STRING"]
						- ["wrap","Wrapper template in the form 'part|part'", "Required", "|"]
						
					data: '{{json(values)}}'
					columns:
						-
							title: Name
						-
							title: Description										
						-
							title: Required
						-
							title:	Defualt Value
					other: |
						searching: false,
						paging: false,
		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<!--
						<li class="previous">
							<a href="/docs/design/contentblocks">
								<span aria-hidden="true">&larr;</span>
								Content Blocks
							</a>
						</li>
						-->
						<li class="next">
							<a href="/docs/design/markers">
								Markers
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20

include conf/docs/template.cfg