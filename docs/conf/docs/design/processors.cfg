# filename: conf/docs/configs/marker.cfg
# path: /docs/configs/marker

############################################################
##
## Design  : Processors
##
############################################################

view_name: &view_name "Design  : Processors"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
include conf/docs/reference/processors/templates.cfg

include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: 'Design  : Processors'
				-
					<<: *p
					value: |
						Processors add functionality to applications, such as, business logic, connecting to data sources, sending emails, redirecting vistors to other webpages, and much more.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Processing			
				-
					<<: *p
					value: |
						The process attribute is used to invoke WebYAML processors that provide additional functionality to content blocks.
				-
					<<: *p
					value: |
						This is an example of a configuration typically found in an authenticated web interface.  This example uses the {{"lib.processors.logic.Evaluate".keyword()}} and {{"lib.processors.redirect.Redirect".keyword()}} classes to send unauthorized users to a login page.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									# file: /bouncer.cfg
									process:
										# is the current visitor logged in?
										\**if
										expression: '\{\{exists(session:login)\}\}'
										'false':
											# no, redirect to login page
											\**redirect
											url: '/login'
											
									# still here?  user is authenticated
									content:
										value: "Authorized Content"
				-
					<<: *p
					value: |
						In the example above, the attribute {{"process".keyword()}} contains  {{"processor".keyword()}} attributes.  The {{"processor".keyword()}} attribute {{"type".keyword()}} is required and must contain the full path to a {{"processor".keyword()}} class.  All {{"processor".keyword()}} classes must return either True or False depending on the success of the opertaion performed.  Therefore, we can use the attributes {{"'true'".keyword()}} and {{"'false'".keyword()}} to continue the {{"processor".keyword()}} tree.
				-
					<<: *p
					value: |
						In this example the {{"type".keyword()}} attribute is set to the class {{"lib.processors.logic.Evaluate".keyword()}}.  This class evalutes the {{"processor".keyword()}} attribute {{"expression".keyword()}} and returns True or False.  If the returned result is False, the {{"processor".keyword()}} tree will continue to the class {{"lib.processors.redirect.Redirect".keyword()}} which will send an unauthenticated user to the page "/login".
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Processing Data
				-
					<<: *p
					value: |
						Another useful purpose of Preprocessors is to collect data from external sources.  Here is an example of how to query a MySQL database and store the result as "user" which can be accessed with markers.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								**ace
								code: |
									process:
										type: lib.processors.mysql.Select
										conf:
											# Database connection settings
											host: localhost
											user: mydbuser
											db: mydbname
											passwd: secret
										sql: 'SELECT createdate FROM users WHERE username = "\{\{session:username\}\}" LIMIT 1;'
										# store the result in the object 'user'
										name: user
										# The format the result as a single record
										format: record
									content:
										value: "The user '\{\{session:username\}\}' was created on '\{\{date(user:createdate\}\}'"
				-
					<<: *p
					value: |
						In the example above, the {{"process".keyword()}} attribute contains a list.  Each list item may contan a single {{"processor".keyword()}} element or a {{"processor".keyword()}} tree.  If a list is given the {{"process".keyword()}} list will continue until a either the end has been reached or an unhandled False is returned.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Post-processing			
				-
					<<: *p
					value: |
						By default any {{"content".keyword()}} Element can use the {{"process".keyword()}} attribute.  However, a few special Elements also support post-processing using the {{"postprocess".keyword()}} attribute.
				-
					<<: *p
					value: |
						An example Element that can uses both the {{"process".keyword()}} and {{"postprocess".keyword()}} attributes is the Form Element ({{"lib.elements.form.Form".keyword()}}).  This will be covered in detail in the Design : Elements section of this documentation.
				-
					<<: *spacer
					height: 20						

				# Reference Chart
				-
					<<: *processors_table
				-
					<<: *spacer
					height: 20									


		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/design/templates"
					class: "pull-right"
					value: Templates
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"
				-
					<<: *a
					url: "/docs/design/forms"
					class: 
					value: Forms
		-
			<<: *spacer
			height: 20						
					
include conf/docs/template.cfg