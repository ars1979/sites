# filename: conf/docs/configs/templates.cfg
# path: /docs/configs/helloworld

############################################################
##
## Design  :  Templates
##
############################################################

view_name: &view_name "Design  :  Templates"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-form.cfg

include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	**docs_navbar

templates:
	myTemplate: &myTemplate
		log: My Templated Content Block
		wrap: '<span class="{{class}}" style="{{style}}">|</span>'
		class: ""
		style: ""



View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: 'Design  :  Templates'
				-
					**p
					value: |
						<b>Templates</b> are a convient way to create reusable content blocks to speed up the building of applications and APIs.  Templates take advantage of a feature of YAML known as "anchors and aliases".  Anchors and aliases are used to duplicate YAML structures.  Use anchors and aliases to make reusable content blocks with pre-populated attributes.
				-
					**spacer
					height: 20						
				-
					**h4
					value: Defining Content Block Templates
				-
					**p
					value: |
						The following example creates a <b>content block template</b> which is assigned to the anchor <i>myTemplate</i>.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									# MyTemplate
									myTemplate: &myTemplate
										# Template Attributes
										wrap: '<span class="\{\{class\}\}" style="\{\{style\}\}">|</span>'
										class: ""
										style: ""
				-
					**p
					value: |
						Template anchors are named using the syntax "&TemplateName" following an attribute name.  This attribute name can be anything as long as it does not confict with other attributes.  Generally templates are placed outside of the main content tree.					
				-
					**spacer
					height: 20
				-
					**h4
					value: Using Content Block Templates
				-
					**p
					value: |
						Template aliases are placeholders in configurations for the attributes belonging to anchors.  Use the syntax "**TemplateName" to place an alias in your configuration.  The following example uses the template "&myTemplate" defined in the example above.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								**ace
								code: |
									content:
										-
											# Push template attributes into this content block
											\**myTemplate
											
											# add an a new attribute to the content block
											value: The Quick brown fox
										-
											# Use the template a second time
											\**myTemplate
											
											# add an a new attribute to the content block
											value: jumped over the lazy dog.
						-
							name: HTML
							id: "html-2"
							content:
								**ace
								mode: html
								code: |
									<span class="" style="">The Quick brown fox</span>
									<span class="" style="">jumped over the lazy dog.</span>
						-
							name: Preview
							id: "preview-2"
							class: row
							content:
								**panel_noheader
								content:
									-
										**spacer
										height: 16							
									-
										content:
											-
												# Push template attributes into this content block
												**myTemplate
												
												# add an a new attribute to the content block
												value: "The Quick brown fox "
											-
												# Use the template a second time
												**myTemplate
												
												# add an a new attribute to the content block
												value: jumped over the lazy dog.
				-
					**p
					value: |
						Attributes inhereted from templates are easily changed in content blocks.  This example replaces the default class and style attributes to make unique content from the template.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-3"
							content:
								**ace
								code: |
									content:
										-
											# Push template attributes into this content block
											\**myTemplate
											
											# add an a new attribute to the content block
											value: The Quick brown fox
											
											# change the class attribute
											class: "text-uppercase"
										-
											# Use the template a second time
											\**myTemplate
											
											# add an a new attribute to the content block
											value: jumped over the lazy dog.
											
											# change the style attribute
											style: "text-decoration: underline;"
						-
							name: HTML
							id: "html-3"
							content:
								**ace
								mode: html
								code: |
									<span class="text-uppercase" style="">The Quick brown fox</span>
									<span class="" style="text-decoration: underline;">jumped over the lazy dog.</span>
						-
							name: Preview
							id: "preview-3"
							class: row
							content:
								**panel_noheader
								content:
									-
										**spacer
										height: 16							
									-
										content:
											-
												# Push template attributes into this content block
												**myTemplate
												
												# add an a new attribute to the content block
												value: "The Quick brown fox "
												
												# change the class attribute
												class: "text-uppercase"
											-
												# Use the template a second time
												**myTemplate
												
												# add an a new attribute to the content block
												value: jumped over the lazy dog.
												
												# change the style attribute
												style: "text-decoration: underline;"
				-
					**spacer
					height: 20						
				-
					**h4
					value: Using Templates From Libraries
				-
					**p
					value: |
						Common elements can be included from template libraries.  Libraries include one or more templates ready to be used in applications or APIs. 
				-
					**p
					value: |
						This example demonstrates how to include the html-bootstrap-panel library and create a panel in an application.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-4"
							content:
								**ace
								code: |
									# include the library
									\include conf/elements/html-bootstrap-panel.cfg
									
									# start the content tree
									content:
										# use the panel_with_footer template
										\**panel_with_footer
										color: primary
										title: "Panel Header"
										content:
											# add content to the panel
											-
												value: "Panel Body"
										footer: "Panel Footer"
						-
							name: HTML
							id: "html-4"
							content:
								**ace
								mode: html
								code: |
									<div class="panel-group col-md-offset-0 col-md-12">
										<div class="panel panel-primary row">
											<div class="panel-heading">
												<h4 class="panel-title">Panel Header</h4>
											</div>
											<div class="panel-body">
												Panel Body
											</div>
											<div class="panel-footer">
												Panel Footer
											</div>                              
										</div>
									</div>
						-
							name: Preview
							id: "preview-4"
							class: row
							content:
								**panel_noheader
								content:
									-
										**spacer
										height: 16			
									-
										# start the content tree
										content:
											# use the panel template
											**panel_with_footer
											color: primary
											title: "Panel Header"
											content:
												# add content to the panel
												-
													value: "Panel Body"
											footer: "Panel Footer"
						
				-
					**spacer
					height: 20						
				-
					**h4
					value: Create a Page Template using these Techniques
				-
					**p
					value: |						
						Using what we have learned so far we can make templates for a website with a header, body, and footer.
				-
					**p
					value: |
						Create a new configuration file to store the Page Template Configuration.
				-
					**ace
					id: "yaml-5"
					code: |
						#filename: conf/page_template.cfg
						
						# Create a Top content block
						# This will be the first content item displayed
						content:
							-
								# Wrap the Output in HTML tags
								wrap: |
									<html>
										<head>
											<title>\{\{page_title\}\}</title>
										</head>
										<body>
											|
										</body>
									</html>
									
								# Make an Attribute and placehoder for the page Title
								page_title: *page_title
								
								# Make a placeholder to include the page Content tree
								**page_content
				-
					**p
					value: |
						Create a new configuration file to store the Page Configuration
				-
					**ace
					id: "yaml-6"
					code: |
						#filename: conf/mypage.cfg
						#path: /mypage
						
						# Give the page a title
						page_title: &page_title "My New Page"
						
						# Add content to the page
						page_content: &page_content
							content:
								-
									value: "My New Page body"
									
						# Include the template
						\include conf/page_template.cfg
						
				-
					**p
					value: |
						Finally add the new view to your <i>conf/urls.cfg</i> file.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-7"
							content:
								**ace
								code: |
									# filename: conf/urls.cfg
									...
									-
										/mypage:
											conf: conf/mypage.cfg
									...
		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/design/markers">
								<span aria-hidden="true">&larr;</span>
								Markers
							</a>
						</li>
						<li class="next">
							<a href="/docs/design/processors">
								Processors
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20
			
include conf/docs/template.cfg