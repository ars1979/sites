# filename: conf/docs/design/data.cfg
# path: /docs/design/data

############################################################
##
## Design  : Data Objects
##
############################################################

view_name: &view_name "Design  : Data Objects"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
include conf/docs/reference/processors/templates.cfg

include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	**docs_navbar

templates:

	value_table: &value_table
		<<: *datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Type
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						<b>Data Objects</b> are used to store and share data among content and 
						processors in WebYAML. Data objects can be used in content elememts and 
						processors to load or store data.  
				-
					**spacer
					height: 20						
				-
					**h4
					value: Create Data Objects
				-
					**p
					value: |
						The simiplest way to create a data object is to use the <a href="/docs/reference/processors/dataObj"><b>**dataObjCreate</b></a> processor and the {{keyword("data")}} attribute.  
						
				-
					**p
					value: |
						After a data object is created it can be accessed using markers. Here are a few examples of how to create data objects using dataObjCreate.  For more examples see the <a href="/docs/reference/processors/dataObj">documentation</a>.
				-
					**h4
					#class: blockquote
					value: |
						Create a new data object containing a string.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-0"
							content:
								**ace
								code: |
									content:
										process:
											# string data object
											\**dataObjCreate
											data:
												store: mystring
												format: string
												value: "Hello World"
										value: |
											\{\{mystring\}\}
						-
							name: Output
							id: "output-0"
							content:
								**pre
								content:
									process:
										# string data object
										**dataObjCreate
										data:
											store: mystring
											format: string
											value: "Hello World"
									value: |
										{{mystring}}
				-
					**p
					class: blockquote
					value: |
						Create a new data object containing a list.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									content:
										process:
											# list data object
											\**dataObjCreate
											data:
												store: mylist
												format: list
												value: 
													- one
													- two
													- three
										value: |
											\{\{mylist\}\}
											\{\{mylist:|1\}\}
						-
							name: Output
							id: "output-1"
							content:
								**pre
								content:
									process:
										# list data object
										**dataObjCreate
										data:
											store: mylist
											format: list
											value: 
												- one
												- two
												- three
									value: |
										{{mylist}}
										{{mylist:|1}}
				-
					**h5
					value: |
						Create a new data object containing a dictionary.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								**ace
								code: |
									content:
										process:
											# dictionary data object
											\**dataObjCreate
											data:
												store: mydict
												format: dict
												value: 
													one: 
														en: one
														es: uno
														
													two: 
														en: two
														es: dos
													three:
														en: three
														es: tres
										value: |
											\{\{mydict\}\}
											\{\{mydict:one\}\}
											\{\{mydict:two:es\}\}
						-
							name: Output
							id: "output-2"
							content:
								**pre
								content:
									process:
										# dictionary data object
										**dataObjCreate
										data:
											store: mydict
											format: dict
											value: 
												one: 
													en: one
													es: uno
													
												two: 
													en: two
													es: dos
												three:
													en: three
													es: tres
									value: |
										{{mydict}}
										{{mydict:one}}
										{{mydict:two:es}}
				-
					**p
					value: |
						In the examples above we created three data objects which were stored as <i>mystring, 
						mylist, and mydict</i>.  The data from these objects can be extracted anywhere 
						<a href="/docs/design/markers"><b>markers</b></a> are alowed, for instance, as 
						part of a content block's {{keyword("value")}} attribute.
				-
					**spacer
					height: 20						
				-
					**h4
					value: Storing Processor Results
				-
					**p
					value: |
						Many processors can store results as data objects.  Every processor that supports this feature will have one or more attributes used to define data objects.  
				-
					**p
					value: |						
						The following example shows how to store a database record using the <a href="/docs/reference/processors/mysql#select"><b>**mysqlSelect</b></a> processor.  This processor uses the {{keyword("result")}} attribute to define a data object.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-3"
							content:
								**ace
								code: |
									content:
										process:
											\**mysqlSelect
											conf:
												# Database connection settings
												host: localhost
												user: webyaml
												db: webyaml
												passwd: webyaml
											sql: |
												SELECT first_name, last_name 
												FROM user
												WHERE user = "\{\{session:user:user\}\}" 
												LIMIT 1
											reader: record
											result:
												# store the result in the data object 'user'
												store: user
												# format: list		#set by processor
												# entry: '\{\{0\}\}'	#set by processor
										
										value: "The name of the user '\{\{session:user:user\}\}' is '\{\{user:first_name\}\} \{\{user:last_name\}\}'" 
				-
					**p
					value: |						
						The following example shows how retreive the output of a shell command using the <b>**shellShell</b> processor and the attributes {{keyword("stdout")}} and {{keyword("sterr")}}.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-4"
							content:
								**ace
								code: |
									content:
										process:
											\**shellShell
											cmd: 'mkdir /tmp'
											stdout:
												store: mkdir_stdout
												# format: string		#set by processor
											stderr:
												store: mkdir_stdout
												# format: string		#set by processor
				-
					**spacer
					height: 20						
				-
					**h4
					value: Data Objects as Input
				-
					**p
					value: |
						Some processors and content elements accept data objects as inputs.  In the following example we will create a data object using <b>**dataObjCreate</b> and give the value of this object to the <b>**loop</b> processor.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-5"
							content:
								**ace
								code: |
									content:
										process:
											# create a new data object
											-
												\**dataObjCreate
												data:
													store: loop_input
													format: list
													value:
														- 
															en: one
															es: uno
														-
															en: two
															es: dos
														-
															en: three
															es: tres
											# loop processor
											-
												\**loop
												data:
													value: '\{\{loop_input\}\}'
													#format: list		#set by processor
												key: number
												subcontent:
													value: |
														english: \{\{number:en\}\}, spanish: \{\{number:es\}\}
						-
							name: Output
							id: "output-5"
							content:
								**pre
								content:
									-
										process:
											# create a new data object
											-
												**dataObjCreate
												data:
													store: loop_input
													format: list
													value:
														- 
															en: one
															es: uno
														-
															en: two
															es: dos
														-
															en: three
															es: tres
											# loop processor
											-
												**loop
												data:
													value: '{{loop_input}}'
													#format: list		#set by processor
												key: number
												subcontent:
													value: |
														english: {{number:en}}, spanish: {{number:es}}
				-
					**p
					value: |
						Here is an example of how to send and receive data from a remote server using the 
						<a href="/docs/reference/processors/rest#POST"><b>**restPOST</b></a> 
						processor and the {{keyword("send")}} and {{keyword("receive")}} attributes.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-6"
							content:
								**ace
								code: |
									content:
										process:
											\**restPOST
											# this server will echo back POST data as JSON
											url: http://jsonplaceholder.typicode.com/posts
											send:
												format: dict
												value:
													title: foo
													body: bar
													userID: 1
											receive:
												format: json
												store: myjson
												
										value: |
											\{\{myjson:title\}\}
											\{\{myjson:body\}\}
											\{\{myjson:userID\}\}
						-
							name: Output
							id: "output-6"
							content:
								**pre
								content:
									process:
										**restPOST
										# this server will echo back POST data as JSON
										url: http://jsonplaceholder.typicode.com/posts
										send:
											format: dict
											value:
												title: foo
												body: bar
												userID: 1
										receive:
											format: json
											store: myjson
											
									value: |
										{{myjson:title}}
										{{myjson:body}}
										{{myjson:userID}}
						
				-
					**spacer
					height: 20
				-
					**h4
					value: Data Object Attributes
				-
					**p
					value: |
						The table below describes all of the attributes available to data objects.  Processors
						that create data objects will often set required attributes automtically.
				-
					<<: *value_table
					id: dataAttributes
					values:
						- 
							- value
							- Marker
							- a marker that points to data 
							- Required
							- ""
						- 
							- value
							- String/Raw
							- data expressed within the config
							- Required
							- ""
						- 
							- format
							- String
							- "format of value: csv, dict, int, json, list, python, string, xml, yaml"
							- Required
							- string								
						- 
							- entry
							- Marker
							- location in value to load or store
							- ""
							- ""
						- 
							- store
							- String
							- If provided, data object will be stored in this location
							- ""
							- ""
						- 
							- reader
							- String
							- 'CSV: list,dict MySQL: list, dict, record'
							- ""
							- "dict"
						- 
							- kwargs
							- Dict
							- Additional formatting options (CSV)
							- ""
							- ""
						- 
							- merge
							- None
							- Use this attribute to add new data into an existing data object
							- ""
							- ""									
				-
					**spacer
					height: 20
				-
					**p
					value: |
						For specifc usage of data objects please see the reference documetation for each 
						processor or content element.
		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/design/processors">
								<span aria-hidden="true">&larr;</span>
								Processors
							</a>
						</li>
						<li class="next">
							<a href="/docs/design/forms">
								Forms
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20						
					
include conf/docs/template.cfg					