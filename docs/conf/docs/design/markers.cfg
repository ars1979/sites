# filename: conf/docs/configs/marker.cfg
# path: /docs/configs/marker

############################################################
##
## Design  : Markers
##
############################################################

view_name: &view_name "Design  : Markers"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg

include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	**docs_navbar

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: 'Design  : Markers'
				-
					**p
					value: |
						A <b>marker</b> is a placeholder for data.  Markers are used to dynamically add values to content from attributes and <a href="/docs/design/data"><b>data objects</b></a>. Markers also support a wide array of functions to manipulate values.
						
				-
					**p
					value: |
						All markers begin with two open braces ({{) and end with two closing braces (}}).  Within the braces a marker may contain a pointer to 
						data or attribute, and/or one or more functions.  Here are some examples using markers in content blocks.
				-
					**spacer
					height: 20						
				-
					**h4
					value: Displaing Attributes With Markers
				-
					**p
					value: |
						The most basic use of a marker is to display an attribute.  In the example below  the custom attribute {{"myattribute".keyword()}} is defined.  
						WebYAML will replace the marker with the value of the attribute.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									myattribute: "World"
									value: "Hello \{\{myattribute\}\}!"
						-
							name: Output
							id: "html-1"
							content:
								**ace
								mode: html
								code: |
									Hello World!
				-
					**p
					value: |
						Markers are not limited to the attribute {{"value".keyword()}}.  Markers can be used within any attribute that contains text.  It is very typical 
						to use custom attributes in conjunction with the {{"wrap".keyword()}} attribute.  This example shows a wrap with many custom attributes and markers.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								**ace
								code: |
									attributes: ''
									class: 'page_header'
									id: 'myheader'
									style: 'padding-bottom: 6px;'
									value: 'Heading1'
									wrap: |
										<h1 id="\{\{id\}\}" class="\{\{class\}\}" style="\{\{style\}\}" \{\{attributes\}\}>|</h1>
						-
							name: Output
							id: "html-2"
							content:
								**ace
								height: 150px
								mode: html
								code: |
									<h1 id="myheader" class="page_header" style="padding-bottom: 6px;" >Heading1</h1>
				-
					**p
					value: |
						The example above does not seem to have much practical value.  However, when used with content block templates, custom attributes 
						are a powerful tool for building and customizing applications.  For more information please see the next section, <a href="/docs/design/templates"><b>Templates</b></a>.
				-
					**spacer
					height: 20						
				-
					**h4
					value: Displaying Data With Markers
					id: data
				-
					**p
					value: |
						WebYAML provides access to many data objects through markers.  These are some of the markers that are available.
				-
					**datatable_js
					id: markers
					values:
						- ["this",'{{html_escape("\{\{this:$attribute\}\}")}}', "attribute in local scope"]
						- ["parent",'{{html_escape("\{\{parent:$attribute\}\}")}}', "parent attribute"]
						- ["top",'{{html_escape("\{\{top:$attribute\}\}")}}', "top attribute"]
						- ["cache",'{{html_escape("\{\{cache:$var\}\}")}}', "cached variables: path, rurl, or custom"]
						- ["session",'{{html_escape("\{\{session:$var\}\}")}}', "session variables"]
						- ["get",'{{html_escape("\{\{get:$var\}\}")}}', "HTTP GET"]
						- ["post",'{{html_escape("\{\{post:$var\}\}")}}', "HTTP POST"]
						- ["getpost",'{{html_escape("\{\{getpost:$var\}\}")}}', "HTTP GET or POST"]
						- ["raw",'{{html_escape("\{\{raw\}\}")}}', "HTTP request BODY"]
						- ["$custom",'{{html_escape("{\{$custom:$var\}\}")}}', "processor data object"]
						- ["path",'{{html_escape("{\{path:$arg\}\}")}}', "path variables/segments: arg0, arg1, etc."]
					columns:
						-
							title: Name
						-
							title: Usage
						-
							title: Description									
					other: |
						searching: false,
						paging: false,

				-
					**p
					value: |
						Here is an example of how to display a GET variable.  The example below assumes the requested page was "/hello?name=Mark".
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-3"
							content:
								**ace
								code: |
									value: "Hello \{\{get:name\}\}!"
						-
							name: Output
							id: "html-3"
							content:
								**ace
								mode: html
								code: |
									Hello Mark!
				-
					**p
					value: |
						This example creates a link back to the referrer page. 
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-4"
							content:
								**ace
								code: |
									value: Back
									wrap: '<a href="\{\{cache:rurl\}\}">|</a>'
						-
							name: Output
							id: "html-4"
							content:
								**ace
								mode: html
								code: |
									<a href="{{cache:rurl}}">Back</a>
				-
					**spacer
					height: 20
				-
					**h4
					value: Displaying Complex Data Objects

				-
					**p
					value: |
						When using markers with complex data objects such as nested dictionaries and lists.
				-
					**p
					value: |
						Here is a sample data object expressed as JSON:
				-
					**ace
					code: |
						{
							"key1": "value1",
							"key2": {
								"keyA": "valueA",
								"keyB": "valueB"
							"key3": [
								"item1",
								"item2"
							]
						}
					
				-
					**p
					value: |
						For this example assume that the dictionary above is accessible through the marker {{html_escape("\{\{data:$var\}\}")}}.  Here are various ways by which the data can be accessed:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-5"
							content:
								**ace
								code: |
									value: |
										Key1: \{\{data:key1\}\}</br>
										Key2 - KeyA: \{\{data:key2:keyA\}\}</br>
										Key2 - KeyB: \{\{data:key2:keyB\}\}</br>
										Key3: \{\{data:key3\}\}</br>
										Key3[0]: \{\{data:key3:|0\}\}</br>
						-
							name: Output
							id: "html-5"
							content:
								**ace
								mode: html
								code: |
									Key1: value1</br>
									Key2 - KeyA: valueA</br>
									Key2 - KeyB: valueB</br>
									Key3: item1, item2</br>
									Key3[0]: item1</br>
				-
					**p
					class: alert alert-info
					value: |
						<strong>Note:</strong> Lists are returned as comma separated values by default.  Sometimes it is necessary to access a specific item in a list.  This can be done with the syntax verticle bar follwed by an index (|x).  The Loop Element provides additional functionality for working with List type data.
				-
					**spacer
					height: 20						
				-
					**h4
					value: Using Functions With Markers			
				-
					**p
					value: |
						Functions provide additional processing to data making it more useful in applications.  Here is a simple function to display the current date.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-6"
							content:
								**ace
								code: |
									value: '\{\{date()\}\}'
						-
							name: Output
							id: "html-6"
							content:
								**ace
								mode: html
								code: |
									{{date()}}
				-
					**p
					value: |
						The date() function defaults to the current date.  However it also accepts a single argument which may be a data object containing a Python datetime object or a Unix timestamp.  Additional arguments may be passed to functions using function specific attributes.  Here are some examples:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-7"
							content:
								**ace
								code: |
									content:
										-
											format: "%c" #ISO
											value: '\{\{date()\}\}</br>'
										-
											format: "%B" # Month
											value: '\{\{date("1490057121")\}\}</br>'
									
						-
							name: Output
							id: "html-7"
							content:
								**ace
								content:
									-
										format: "%c"
										value: |
											{{date()}}</br>
									-
										format: "%B"
										value: |
											{{date("1490057121")}}</br>
				-
					**p
					value: |
						Functions may also be used in series, where the output of one function is the input of another.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-8"
							content:
								**ace
								code: |
									content:
										delimiter: ","
										value: '\{\{split("1,2,3").join()\}\}'
										# output: 1, 2, 3
						-
							name: Output
							id: "output-8"
							content:
								**ace
								content:
									content:
										delimiter: ","
										value: '{{split("1,2,3").join()}}'
										# output: 1, 2, 3												
				-
					**spacer
					height: 20										
				-
					**p
					value: |
						Here is a list of available functions and their descriptions.
				-
					**datatable_js
					id: functions
					values:
						- ["int()", "Convert string to interger"]
						- ["string()", "Convert obj to string"]
						- ["split()", "Split a string into a list"]
						- ["sha256()", "Encrypt a secret with sha-256"]
						- ["md5()", "md5 checksum"]
						- ["exists()", "Logical check of an attribute.  Returns: 'True' or 'False'"]
						- ["singleline()", "Remove line breaks"]
						- ["strip()", "Remove leading and trailing whitespace"]
						- ["escape()", "Escape single and double quotes"]
						- ["join()", "Convert a list into a delimited string"]
						- ["json()", "Convert a data object in to a JSON string"]
						- ["yaml()", "Convert a data object in to YAML syntax"]
						- ["truncate()", "Truncate tuncate object.  length attribute defaults to 50"]
						- ["html_escape()", "Convert special characters"]
						- ["uuid()", "Generate random UUID"]
						- ["url_quote()", "urllib.quote_plus()"]
						- ["url_unquote()", "urllib.unquote_plus()"]
						- ["date()", "Date and Time rendering"]
						- ["last4()", "Replace all charcters with '*' except the last 4"]
						- ["list()", "If obj is not a list return list containing obj"]
						- ["keyword()", "wrap in <mark>|</mark>"]
						- ["title_case()", "Capitalize the first letter of every word"]
						- ["lower()", "Lowercase every letter of a string"]
						- ["upper()", "Capitalize every letter of a string"]
						
					data: '{{json(values)}}'
					columns:
						-
							title: Function
						-
							title: Description
					other: |
						searching: false,
						paging: false,
						
		-
			**spacer
			height: 20					
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/design/contentblocks">
								<span aria-hidden="true">&larr;</span>
								Content Blocks
							</a>
						</li>
						<li class="next">
							<a href="/docs/design/templates">
								Templates
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>

		-
			**spacer
			height: 20					
					
include conf/docs/template.cfg