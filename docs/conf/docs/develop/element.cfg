# filename: conf/docs/develop/element.cfg

############################################################
##
## Develop  : Views
##
############################################################

view_name: &view_name "Develop  : Elements"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					**markdown
					value: |
						##Creating a Custom Element
						WebYAML can be easily extended by adding custom Element libraries and classes. If you would like your application to render content in ways that are beyond what WebYAML can perform by itself, you can create an element to perform the rendering.

						Elements are based on the python class classes.element.Element(). Here is the simplest of Element:

							# filename: lib/elements/myelement.py

							import classes.element

							class Nothing(classes.element.Element):

								def render(self):
									return self.conf.get('value',"")

						###Usage in a Content Block
						Save your custom elements in your application directories. If you do not have a lib directory, create the directories lib/ and lib/elements/ inside your application directory. By placing elements in this directory they can be invoked with the following content block syntax:

							content:
								type: lib.processors.mymodule.Nothing
								myattribute: myvalue
								value: "Something to render"

						###Attributes
						Attributes are automatically added to your processor class. All processor attributes are available as keys of the dictionary self.conf. The example belows demonstrates how to access the attribute 'myattribute' from the example above and print its value to the console or log.

							...
								def render(self):

									print(self.conf['myattribute'])
									# myvalue
									
									return self.conf.get('value',"")

						If you need to set a default value for an attribute, it can easily be set using any of the following syntaxes:

							...
								def render(self):

									# syntax one
									self.conf['myattribute'] = self.conf.get('myattribute',"default value")

									# syntax two
									self.conf.setdefault('myattribute',"default value")

									# syntax three
									myvar = self.conf.get('myattribute',"default value")

									...

						If an attribute is required for your element, create a simple check in your render() method.

							...    
								def render(self):

									# check to see if required attribute was given.

									if not self.conf.get('myattribute'):

										print("the attribute 'myattribute' was not given")
									
									# return the rendered value
									return self.conf.get('value',"")


						####Allowing Markers in Attributes
						Markers can be used as part of an attribute's value. However the markers will not be automatically replaced. To replace markers, use the following syntax.

							...    
								def render(self):

									# set a default value of an empty string
									self.conf.setdefault('myattribute',"")

									# replace markers with values
									self.conf['myattribute'] = self.content.fnr(self.conf['myattribute'])

									
									# return the rendered value
									return self.conf.get('value',"")
							...
						
						Note: This only works with strings. For other data types use data objects as described below.

						###Data Objects
						It is possible to pass data objects to elements and then use custom programming to render the data object in a creative way.  For instance an element can accept a data object which contains data to generate a table.

						A key advantage of using data objects is that it simplifies the usage of complex and varied data structures for both designers and developers. Data objects are simple for designers because they are defined using a consistent structure. Data objects are simple for developers because methods for reading and writing data objects are easily called within your elements.

						####Creating a Data Object
						The easiest way for a configuration designer to create a data object is to use the processor lib.processors.dataObj.Create(). For the purpose of this tutorial we will assume that the following content block has already been processed:

							process:
								<<: *dataObjCreate
								data:
									value: 
										- 
											id: 1
											name: One
										- 
											id: 2
											name: Two
										- 
											id: 3
											name: Three
									format: list
									store: myintegers

						The content block above will create a data object named 'myintegers' containing a list of dictionaries containing an id and name for integers from 1 to 3. For more information on options that can be used with data objects see this documentation: http://webyaml.com/docs/reference/processors/dataObj

						####Reading Data Objects
						If the content above has already been processed then the data object myintegers will exist. To give the data object to your element the configuration could be written like this:

							content:
								type: lib.elements.myelement.Table
								input:
									value: '\{\{myintegers\}\}'
									format: list

						In the example above the data object is defined in the attribute 'input'. The data object can be read and used in your element with the following code:
						
							...    
								def render(self):

									# ensure that the input attribute exists:
									if not self.conf.get('input'):

										print("the attribute 'input' was not found")

										return ""

									# load data
									if not self.content.load_data(self.conf['input']):

										print('data failed to load')

										return ""

									# print the data to the console or log file
									print(self.content.data)

									return self.conf.get('value',"")

						Obviously printing the input is not very useful, unless debug output is desired. A good way to toggle on debug output is to use an attribute. For consistency with other elements use the attribute 'debug' and search for it in your code.

							...
								debug = False
								if self.conf.get("debug"):
								    debug = True

								...

								if debug:
								    print(self.content.data)

						If the data object is a string that may contain unicode characters then errors and exceptions can occur. To prevent this from happening it may be required to use the following syntax:

							...
								    print(self.content.data.__repr__())

						###Creating a Practical Element
						The examples above demonstrate various techniques and python methods that are available for your use.  To make a praticle example using the examples above, we can add python code to generate a table from the data object.

							# filename: lib/elements/myelement.py

							import classes.element

							class Table(classes.element.Element):

								def render(self):

									# ensure that the input attribute exists:
									if not self.conf.get('input'):

										print("the attribute 'input' was not found")

										return ""

									# load data
									if not self.content.load_data(self.conf['input']):

										print('data failed to load')

										return ""
									
									# create a table from the data
									header_content = ""
									body_content = ""
									
									# get header row
									headers = []
									for key in self.content.data[0]:
										headers.append(key)
									
									# render table cells
									for row in self.content.data:
										
										for header in headers:
											
											body_content += "<td>%s</td>"%str(row[header])
										
										body_content = "<tr>%s</tr>"%body_content
									
									# render header row
									for header in headers:
										
										header_content += "<td>%s</td>"%str(header)
									
									header_content = "<tr>%s</tr>"%header_content
									
									# wrap in table tag
									self.conf['value'] = "<table>%s%s</table>"%(header_content,body_content)
									
									return self.conf.get('value',"")

						###Conclusions
						- Custom elements are easy to create. Here are some helpful tips to make your elements more useful.
						- Do not "hard code" variables into elements. Use attributes instead. Things that change such as passwords or keys should be kept in configurations and not python code.
						- Group similar elements together in one module. In our table module above we could add a collection of table elements, such as with and without headers, or other varying design styles.
						- Do not name your modules the same as modules you install or import.


include conf/docs/template.cfg