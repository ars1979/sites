# filename: conf/docs/develop/processor.cfg

############################################################
##
## Develop  : Views
##
############################################################

view_name: &view_name "Develop  : Processors"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					**markdown
					value: |
						##Creating a Custom Processor

						WebYAML can be easily extended by adding custom Processor libraries and classes.  If you would like your application to integrate with an external application, you can create a processor to act as middleware layer between the webserver and the external application.  If your application requires custom python coding, processors may also be a good choice.

						Processors are based on the python class classes.processor.Processor().  Here is the simplest of processors:

							# filename: lib/processors/mymodule.py

							import classes.processor

							class Nothing(classes.processor.Processor):
								
								def run(self):

									return True


						###Usage in a Content Block

						Save your custom processors in your application directories.  If you do not have a lib directory, create the directories lib/ and lib/processors/ inside your application directory.  By placing processors in this directory they can be invoked with the following content block syntax:

							process:
								type: lib.processors.mymodule.Nothing
								myattribute: myvalue


						###Attributes

						Attributes are automatically added to your processor class.  All processor attributes are available as keys of the dictionary self.conf.  The example belows demonstrates how to access the attribute 'myattribute' from the example above and print its value to the console or log. 

							...
								def run(self):

									print(self.conf['myattribute'])
									# myvalue

									return True


						If you need to set a default value for an attribute, it can easily be set using any of the following syntaxes:

							...
								def run(self):

									# syntax one
									self.conf['myattribute'] = self.conf.get('myattribute',"default value")

									# syntax two
									self.conf.setdefault('myattribute',"default value")

									# syntax three
									myvar = self.conf.get('myattribute',"default value")
									
									return True


						If an attribute is required for your processor, create a simple check in your run() method.

							...	
								def run(self):

									# check to see if required attribute was given.

									if not self.conf.get('myattribute'):

										print("the attribute 'myattribute' was not given")

										return False

									return True


						####Allowing Markers in Attributes

						Markers can be used as part of an attribute's value.  However the markers will not be automatically replaced.  To replace markers, use the following syntax. 

							...	
								def run(self):

									# set a default value of an empty string
									self.conf.setdefault('myattribute',"")

									# replace markers with values
									self.conf['myattribute'] = self.content.fnr(self.conf['myattribute'])
							...

						Note: This only works with strings.  For other data types use data objects as described below.


						###Data Objects

						Many processors use data objects as input, output or both.  For instance the class lib.processors.rest.Post() can accept a data object which contains data to send to a remote server.  The Post processor will collect responses from a remote server and convert the response into another data object which can then be referenced by other elements in the same content tree.

						A key advantage of using data objects is that it simplifies the usage of complex and varied data structures for both designers and developers.  Data objects are simple for designers because they are defined using a consistent structure.  Data objects are simple for developers because methods for reading and writing data objects are easily called within your processors.

						####Creating a Data Object

						The easiest way for a configuration designer to create a data object is to use the processor lib.processors.dataObj.Create().  For the purpose of this tutorial we will assume that the following content block has already been processed:

							process:
								**dataObjCreate
								data:
									value: 
										- 1
										- 2
										- 3
									format: list
									store: myintegers
									
						The content block above will create a data object named 'myintegers' containing a list of integers from 1 to 3.  For more information on options that can be used with data objects see this documentation: http://webyaml.com/docs/reference/processors/dataObj


						####Reading Data Objects

						If the content above has already been processed then the data object myintegers will exist.  To give the data object to your processor the configuration could be written like this:

							process:
								type: lib.processors.mymodule.Nothing
								input:
									value: '\{\{myintegers\}\}'
									format: list

						In the example above the data object is defined in the attribute 'input'.  The data object can be read and used in your processor with the following code:

							...	
								def run(self):

									# ensure that the input attribute exists:
									if not self.conf.get('input'):

										print("the attribute 'input' was not found")
										
										return False

									# load data
									if not self.content.load_data(self.conf['input']):
										
										print('data failed to load')
											
										return False
									
									# print the data to the console or log file
									print(self.content.data)
									# [1,2,3]

									return True

						Obviously printing the output is not very useful, unless debug output is desired.  A good way to toggle on debug output is to use an attribute.  For consistency with other processors use the attribute 'debug' and search for it in your code.

							...
									debug = False
									if self.conf.get("debug"):
										debug = True

									...

									if debug:
										print(self.content.data)

						If the data object is a string that may contain unicode characters then errors and exceptions can occur.  To prevent this from happening it may be required to use the following syntax:

							...
										print(self.content.data.__repr__())


						####Writing Data Objects

						Writing data objects is almost identical to reading data objects.  The only difference is that the object is defined with the attribute 'store'.  This attribute defines the location or name where the data will be stored.  

						Let's modify the processor to loop through the list defined in the 'input' attribute and create a new list containing the each integer multiplied by itself.  Then store the new list as a new data object.

							# filename: lib/processors/mymodule.py

							import classes.processor

							class MultiplyBySelf(classes.processor.Processor):

								def run(self):

									# ensure that the input attribute exists:
									if not self.conf.get('input'):

										print("the attribute 'input' was not found")
										
										return False

									# ensure that the output attribute exists:
									if not self.conf.get('output'):

										print("the attribute 'output' was not found")
										
										return False
									
									# read data
									if not self.content.load_data(self.conf['input']):
										
										print('data failed to read')
											
										return False
									
									# loop though the input
									newlist = []
									
									for i in self.content.data:
										
										newlist.append(self.content.data[i] * self.content.data[i])
									
									# set the output format to be a list
									self.conf['output']['format'] = 'list'
									
									# set the output value
									self.conf['output']['value'] = newlist

									# write data
									if not self.content.load_data(self.conf['output']):
										
										print('data failed to write')
											
										return False

									return True


						Here is an example configuration file which uses the processor above:

							content:
								-
									# create a list of integers
									process:
										**dataObjCreate
										data:
											value: 
												- 1
												- 2
												- 3
											format: list
											store: myintegers
								-
									# give list of integers to processor
									process:
										type: lib.processors.mymodule.MultiplyBySelf
										input:
											value: '\{\{myintegers\}\}'
											format: list
										output:
											store: mypowers
								-
									# display the value of output in JSON format
									# this should display
									# [1,4,9]
									
									value: '\{\{json(mypowers)\}\}'
								

						###Creating a Practical Processor

						The examples above demonstrate various techniques and python methods that are available for your use.  A typical processor is created to do more than perform mundane tasks like multiplying numbers.  One of the advantages of python is that there are many freely available modules which can be easily installed and used within your processors.  

						For example if you want to work with geographic data in your processor, you could install the googlemaps module:

							# pip install googlemaps


						After it is installed you can use it in your processor code  like this:

							# filename: lib/processors/map.py

							import classes.processor

							import googlemaps

							class Geocode(classes.processor.Processor):

								def run(self):

									# ensure that the key attribute exists:
									if not self.conf.get('key'):

										print("the attribute 'key' was not found")
										
										return False

									# ensure that the address attribute exists:
									if not self.conf.get('address'):

										print("the attribute 'address' was not found")
										
										return False

									# ensure that the result attribute exists:
									if not self.conf.get('result'):

										print("the attribute 'result' was not found")
										
										return False

									# replace markers with values
									key = self.content.fnr(self.conf['key'])
									address = self.content.fnr(self.conf['address'])		

									# create a googlemaps object
									gmaps = googlemaps.Client(key=key)

									# do the geocode
									geocode_result = list(gmaps.geocode(address))

									# set the format to list
									self.conf['result']['format'] = 'list'
									
									# set the output value
									self.conf['output']['value'] = geocode_result									

									# write the result to a data object
									if not self.content.load_data(self.conf['result']):
										
										print('data failed to write')
											
										return False

									# everything worked out and the coordinates have been stored
									return True


						This content block will geocode an address:

							process:
								type: lib.processors.map.Geocode
								address: '1600 Amphitheatre Parkway, Mountain View, CA'
								result:
									store: 'coordinates'


						###Conclusions

						Custom processors are easy to create.  Here are some helpful tips to make your processors more useful.

						- Keep processors simple.  It is a good practice to limit processors to a single task which can be performed with only a few operations.
						
						- Do not "hard code" variables into processors. Use attributes instead.  Things that change such as passwords or keys should be kept in configurations and not python code.

						- Group similar processors together in one module.  In our map module above we could add a collection of map processors, such as Geocode, ReverseGeocode, and Directions.

						- Do not name your modules the same as modules you install or import.  For instance we cannot name the map module googlemaps.  This would conflict with the googlemaps module we want to import.
						


include conf/docs/template.cfg