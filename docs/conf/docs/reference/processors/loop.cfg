# filename: conf/docs/reference/processors/loop.cfg

############################################################
##
## Reference  : Processors : Loop
##
############################################################

view_name: &view_name "Reference  : Processors : Loop"

include conf/elements/html-basic.cfg
include conf/elements/html-datatables.cfg

include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	**docs_navbar

templates:

	value_table: &value_table
		**datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,
		#ordering: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						The Loop library contains a processor for looping over data objects.
				-
					**spacer
					height: 20						
				-
					**h4
					class: page-header
					value: lib.processors.loop.Loop
					id: loop
				-
					**h4
					value: Description
				-
					**p
					value: |
						The Loop processor provides a method of iterating through data objects that are formated as lists.  Each iteration may be used to create subcontent or perform a subprocess.
				-
					**h4
					value: Usage
				-
					**ace
					id: ace-1
					code: |
						\**loop
						data:
							value:
						key:
						limit:
						filter:
						# choose subprocess or subcontent
						subprocess:
							...
						subcontent:
							...
						
				-
					**h4
					value: Attributes					

				-
					**value_table
					id: loop_tbl
					values:
						- 
							- data
							- Data Object Attributes
							- Required
							- ""
						- 
							- key
							- Location to store the list item for use in sub objects
							- Required
							- "i"
						- 
							- limit
							- Maximum number of results to process
							- ""
							- ""								
						- 
							- filter
							- A string representing a python expression.  Only True results are processed.
							- ""
							- ""
				-
					**h4
					value: Examples
				-
					**p
					value: |
						Here is a simple loop example.  The data for this loop is defined within the {{keyword("data")}} attribute.  This example uses the attribute {{keyword("subcontent")}} to render each element of the list.
				
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								**ace
								code: |
									content:
										process:
											\**loop
											data:
												value:
													- 
														en: one
														es: uno
													-
														en: two
														es: dos
													-
														en: three
														es: tres
											key: number
											subcontent:
												value: |
													english: \{\{number:en\}\}, spanish: \{\{number:es\}\}
						-
							name: Output
							id: "output-1"
							content:
								**ace
								content:
									process:
										**loop
										data:
											value:
												- 
													en: one
													es: uno
												-
													en: two
													es: dos
												-
													en: three
													es: tres
										key: number
										subcontent:
											value: |
												english: {{number:en}}, spanish: {{number:es}}
				-
					**p
					value: |
						The next example uses the {{keyword("subprocess")}} attribute to perform a process for each item in a list.  This example uses the processor <a href="/docs/reference/processors/mysql#insert"><b>**mysqlInsert</b></a> to save each item of the list as a database record.
				
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								**ace
								code: |
									content:
										process:
											\**loop
											data:
												value:
													- 
														en: one
														es: uno
													-
														en: two
														es: dos
													-
														en: three
														es: tres
											key: number
											subprocess:
												\**mysqlInsert
												conf:
													...
											
												sql: |
													INSERT into numbers
													(
														en, 
														es
													) 
														VALUES 
													(
														'\{\{number:en\}\}', 
														'\{\{number:es\}\}'
													)
													
				-
					**p
					value: |
						Here is an example of a <b>nested loop</b>.  Nested loops are sometimes needed to parse complex data.
				
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-3"
							content:
								**ace
								code: |
									content:
										process:
											\**loop
											data:
												value:
													-
														id: 1
														name:
															- one
															- un
															- uno
													-
														id: 2
														name: 
															- two
															- deux
															- dos
											key: number
											subprocess:
												\**loop
												data:
													value: '\{\{number:name\}\}'
												key: word
												subcontent:
													value: |
														\{\{word\}\}
			
						-
							name: Output
							id: "output-3"
							content:
								**ace
								content:
									-
										process:
											**loop
											data:
												value:
													-
														id: 1
														name:
															- one
															- un
															- uno
													-
														id: 2
														name: 
															- two
															- deux
															- dos
											key: number
											subprocess:
												**loop
												data:
													value: '{{number:name}}'
												key: word
												subcontent:
													value: |
														{{word}}
				-
					**spacer
					height: 20

include conf/docs/template.cfg