# filename: conf/docs/home.cfg
# path: /docs/home

############################################################
##
## Getting Started : First Application
##
############################################################

view_name: &view_name "Getting Started: First Application"

include conf/elements/html-basic.cfg
include conf/elements/ace.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: "Getting Started : First Application"
				-
					<<: *p
					value: |						
						Start building your application by copying the <i>sites/blank</i> directory to make a new directory for your application.  This example creates a new directory for the application 'hello'.
				-
					**ace
					id: ace-1
					mode: sh
					code: |
						cd /opt/webyaml/sites/
						cp -rfp blank hello
				-
					<<: *p
					value: |
						An application requires a minimum of two configuration files, <i>conf/urls.cfg</i> and at least one content configuration file.  These configuration files, as well as all other files used by this application should be stored in the application directory.
				-
					<<: *h4
					value: conf/urls.cfg	
				-
					<<: *p
					value: |
						The URLs configuration file contains a list of available <b>views</b> for an application.   
				-
					<<: *p
					value: |						
						Lets define the first view for this application by adding a url to this file. Using a text editor, create the file <i>conf/urls.cfg</i> with the following contents:
				-
					**ace
					id: ace-2
					code: |
						# filename: conf/urls.cfg
						# hello world urls
						
						-
							/:
								conf: conf/hello.cfg
				-
					<<: *p
					class: alert alert-info
					style: "border-left: 5px solid;"
					value: |
						<strong>Note:</strong> YAML syntax uses spaces for indentation.  However, you may use tabs if you prefer.  Tabs will be converted to spaces when the configurations are loaded.
				-
					<<: *h4
					value: Content Configuration	
				-
					<<: *p
					value: |
						In the URLs configuration file above we declared that the content configuration file <i>conf/hello.cfg</i> should be used to produce a view for the URL "/".
						
				-
					<<: *p
					value: |					
						Using a text editor, create the file <i>conf/hello.cfg</i> and add the following sample content:
				-
					**ace
					id: ace-3
					code: |
						# filename: conf/hello.cfg
						# hello world content

						value: Hello World!
				-
					<<: *h4
					value: Testing the Application						
				-
					<<: *p
					value: |
						Start the application 'hello' with the following commands:
				-
					**ace
					id: ace-4
					mode: sh
					code: |
						$ cd /path-to-framework/sites/hello/
						$ ./app.py
				-
					<<: *p
					value: |
						After the server is started, open a web browser and visit the page 
						"http://localhost:8080/". You should now see "Hello World!" displayed in the window.
		-
			<<: *spacer
			height: 20
		-
			value: |
				<nav aria-label="...">
					<ul class="pager">
						<li class="previous">
							<a href="/docs/gettingstarted/filestructure">
								<span aria-hidden="true">&larr;</span>
								File Structure
							</a>
						</li>
						<li class="next">
							<a href="/docs/gettingstarted/applicationserver">
								Application Server
								<span aria-hidden="true">&rarr;</span>
							</a>
						</li>
					</ul>
				</nav>
		-
			<<: *spacer
			height: 20			

include conf/docs/template.cfg